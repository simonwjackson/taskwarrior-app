{"version":3,"file":"static/development/pages/api/graphql.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/api/graphql.js","webpack:///external \"apollo-server-micro\"","webpack:///external \"child_process\"","webpack:///external \"graphql\"","webpack:///external \"graphql-iso-date\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import { ApolloServer, gql } from 'apollo-server-micro'\nimport {\n  graphql,\n  GraphQLObjectType,\n  GraphQLSchema,\n} from 'graphql' \n\nimport {\n  GraphQLDate,\n  GraphQLTime,\n  GraphQLDateTime\n} from 'graphql-iso-date'\n\n/**\n * Executes a shell command and return it as a Promise.\n * @param cmd {string}\n * @return {Promise<string>}\n */\nfunction execShellCommand(cmd) {\n  const { exec } = require('child_process')\n\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        console.warn(error)\n      }\n      resolve(stdout? stdout : stderr)\n    })\n  })\n}\n\nconst logger = console.log\n\nconst typeDefs = gql`\n  scalar Date\n\n  type Task {\n    uuid: ID!\n    description: String\n    entry: Date\n    modified: Date\n    status: String\n    urgency: Float\n  }\n\n  type Query {\n    tasks(filter: String, context: String): [Task]\n  }\n\n  type Mutation {\n    modifyTask(uuid: ID, status: String): Task\n    addTask(description: String): String\n    syncTasks: String\n  }\n` \n\nconst resolvers = {\n  Query: {\n    tasks: async (a,s,d,f) => {\n      let string = '-HACK_TO_SHOW_ALL '\n\n      if (s.context) {\n        const contextFilters =`grep \"context.${s.context}\" /home/node/.taskrc | cut -d \\'=\\' -f 2`\n        const context = await execShellCommand(contextFilters)\n\n        string = `${string} \\\\(${context.trim()}\\\\)`\n      }\n\n      if (s.filter) {\n        string = `${string} ${s.filter}`\n      }\n\n      const cmd = `/usr/bin/task ${string} export`\n      logger(cmd)\n\n      const jsonString = await execShellCommand(cmd)\n      return JSON\n        .parse(jsonString)\n        .sort((a, b) => b.urgency - a.urgency)\n    },\n  },\n\n  Mutation: {\n    addTask: async (a,s,d,f) => {\n      await execShellCommand(`/usr/bin/task add ${s.description}`)\n      return 'ok'\n    },\n\n\n    syncTasks: async (a,s,d,f) => {\n      await execShellCommand('/usr/bin/task sync')\n      return 'ok'\n    },\n\n    modifyTask: async (a,s,d,f) => {\n      await execShellCommand(`/usr/bin/task ${s.uuid} modify status:${s.status}`)\n      const x = await execShellCommand(`/usr/bin/task rc.json.array=off ${s.uuid} export`)\n      return JSON.parse(x)\n    }\n  } \n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers\n})\n\nconst handler = apolloServer.createHandler({ path: '/api/graphql' })\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n}\n\nexport default handler\n","module.exports = require(\"apollo-server-micro\");","module.exports = require(\"child_process\");","module.exports = require(\"graphql\");","module.exports = require(\"graphql-iso-date\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAMA;;;;;;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAAA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAtBA;AAyBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAhBA;AA1BA;AA8CA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AADA;AAMA;;;;;;;;;;;;;;;;;;;;;;;ACnHA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}