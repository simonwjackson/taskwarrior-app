{"ast":null,"code":"import { ApolloServer, gql } from 'apollo-server-micro';\nimport { graphql, GraphQLObjectType, GraphQLSchema } from 'graphql';\nimport { GraphQLDate, GraphQLTime, GraphQLDateTime } from 'graphql-iso-date';\n/**\n * Executes a shell command and return it as a Promise.\n * @param cmd {string}\n * @return {Promise<string>}\n */\n\nfunction execShellCommand(cmd) {\n  const exec = require('child_process').exec;\n\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n}\n\nconst typeDefs = gql`\n  scalar Date\n\n  type Task {\n    uuid: ID!\n    description: String\n    entry: Date\n    modified: Date\n    status: String\n    urgency: Float\n  }\n\n  type Query {\n    tasks(filter: String, context: String): [Task]\n  }\n\n  type Mutation {\n    modifyTask(uuid: ID, status: String): Task\n    addTask(description: String): String\n    syncTasks: String\n  }\n`;\nconst resolvers = {\n  Query: {\n    tasks: async (a, s, d, f) => {\n      let filter = s.filter ? `report:all ${s.filter}` : '';\n\n      if (s.context) {\n        console.log(s.context);\n        const contextFilters = `grep \"context.${s.context}\" /home/node/.taskrc | cut -d \\'=\\' -f 2`;\n        const context = await execShellCommand(contextFilters);\n        console.log(context);\n        filter = `${context.trim()} ${filter}`;\n      }\n\n      const cmd = `/usr/bin/task ${filter} export`;\n      console.log(cmd);\n      const jsonString = await execShellCommand(cmd);\n      return JSON.parse(jsonString);\n    }\n  },\n  Mutation: {\n    addTask: async (a, s, d, f) => {\n      await execShellCommand(`/usr/bin/task add ${s.description}`);\n      return 'ok';\n    },\n    syncTasks: async (a, s, d, f) => {\n      await execShellCommand('/usr/bin/task sync');\n      return 'ok';\n    },\n    modifyTask: async (a, s, d, f) => {\n      await execShellCommand(`/usr/bin/task ${s.uuid} modify status:${s.status}`);\n      const x = await execShellCommand(`/usr/bin/task rc.json.array=off ${s.uuid} export`);\n      return JSON.parse(x);\n    }\n  }\n};\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nconst handler = apolloServer.createHandler({\n  path: '/api/graphql'\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":{"version":3,"sources":["/home/node/app/pages/api/graphql.js"],"names":["ApolloServer","gql","graphql","GraphQLObjectType","GraphQLSchema","GraphQLDate","GraphQLTime","GraphQLDateTime","execShellCommand","cmd","exec","require","Promise","resolve","reject","error","stdout","stderr","console","warn","typeDefs","resolvers","Query","tasks","a","s","d","f","filter","context","log","contextFilters","trim","jsonString","JSON","parse","Mutation","addTask","description","syncTasks","modifyTask","uuid","status","x","apolloServer","handler","createHandler","path","config","api","bodyParser"],"mappings":"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","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro'\nimport {\n  graphql,\n  GraphQLObjectType,\n  GraphQLSchema,\n} from 'graphql' \n\nimport {\n  GraphQLDate,\n  GraphQLTime,\n  GraphQLDateTime\n} from 'graphql-iso-date'\n\n/**\n * Executes a shell command and return it as a Promise.\n * @param cmd {string}\n * @return {Promise<string>}\n */\nfunction execShellCommand(cmd) {\n  const exec = require('child_process').exec\n\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        console.warn(error)\n      }\n      resolve(stdout? stdout : stderr)\n    })\n  })\n}\n\nconst typeDefs = gql`\n  scalar Date\n\n  type Task {\n    uuid: ID!\n    description: String\n    entry: Date\n    modified: Date\n    status: String\n    urgency: Float\n  }\n\n  type Query {\n    tasks(filter: String, context: String): [Task]\n  }\n\n  type Mutation {\n    modifyTask(uuid: ID, status: String): Task\n    addTask(description: String): String\n    syncTasks: String\n  }\n` \n\nconst resolvers = {\n  Query: {\n    tasks: async (a,s,d,f) => {\n      let filter = s.filter ? `report:all ${s.filter}` : '' \n      if (s.context) {\n        console.log(s.context)\n        const contextFilters =`grep \"context.${s.context}\" /home/node/.taskrc | cut -d \\'=\\' -f 2`\n        const context = await execShellCommand(contextFilters)\n        console.log(context)\n        filter = `${context.trim()} ${filter}`\n      }\n      const cmd=`/usr/bin/task ${filter} export`\n      console.log(cmd)\n      const jsonString = await execShellCommand(cmd)\n\n      return JSON.parse(jsonString)\n    },\n  },\n\n  Mutation: {\n    addTask: async (a,s,d,f) => {\n      await execShellCommand(`/usr/bin/task add ${s.description}`)\n      return 'ok'\n    },\n\n    syncTasks: async (a,s,d,f) => {\n      await execShellCommand('/usr/bin/task sync')\n      return 'ok'\n    },\n\n    modifyTask: async (a,s,d,f) => {\n      await execShellCommand(`/usr/bin/task ${s.uuid} modify status:${s.status}`)\n      const x = await execShellCommand(`/usr/bin/task rc.json.array=off ${s.uuid} export`)\n      return JSON.parse(x)\n    }\n  } \n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers\n})\n\nconst handler = apolloServer.createHandler({ path: '/api/graphql' })\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n}\n\nexport default handler\n"]},"metadata":{},"sourceType":"module"}