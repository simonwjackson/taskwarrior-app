{"ast":null,"code":"var _jsxFileName = \"/storage/code/github/simonwjackson/task-warrior-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\nconst COMPLETE_TODO = gql`\n    mutation CompleteTask($uuid: ID!) {\n      completeTask(uuid: $uuid) {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst Home = () => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(TASKS_QUERY);\n  const [completeTodo] = useMutation(COMPLETE_TODO, {\n    update(cache, {\n      data\n    }) {\n      const {\n        tasks\n      } = cache.readQuery({\n        query: TASKS_QUERY\n      });\n      cache.writeQuery({\n        query: TASKS_QUERY,\n        data: {\n          tasks: tasks.filter(task => task.uuid !== data.completeTask.uuid).concat(data.completeTask)\n        }\n      });\n    }\n\n  });\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    }, \"Error: \", JSON.stringify(error));\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, data.tasks.slice().map(x => {\n    console.log(x);\n    return x;\n  }).sort((a, b) => {\n    return a.entry - b.entry;\n  }).map(x => {\n    console.log(x);\n    return x;\n  }).map(task => {\n    // let input\n    return __jsx(\"li\", {\n      key: task.uuid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 20\n      }\n    }, __jsx(\"input\", {\n      //  ref={node => {\n      //   input = node;\n      // }}\n      type: \"checkbox\",\n      checked: task.status === \"completed\",\n      onChange: e => {\n        e.preventDefault();\n        task.status !== \"completed\" ? completeTodo({\n          variables: {\n            uuid: task.uuid\n          }\n        }) : null;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }), task.description);\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/index.js"],"names":["React","Head","useQuery","useMutation","gql","TASKS_QUERY","COMPLETE_TODO","Home","data","loading","error","completeTodo","update","cache","tasks","readQuery","query","writeQuery","filter","task","uuid","completeTask","concat","JSON","stringify","slice","map","x","console","log","sort","a","b","entry","status","e","preventDefault","variables","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { useQuery , useMutation} from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst COMPLETE_TODO = gql`\n    mutation CompleteTask($uuid: ID!) {\n      completeTask(uuid: $uuid) {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst Home = () => {\n  const { data, loading, error } = useQuery(TASKS_QUERY);\n    const [ completeTodo ] = useMutation(COMPLETE_TODO, {\n      update(cache, { data }) {\n        const { tasks } = cache.readQuery({ query: TASKS_QUERY });\n\n        cache.writeQuery({\n          query: TASKS_QUERY,\n            data: { tasks: tasks\n                .filter(task => task.uuid !== data.completeTask.uuid)\n                .concat(data.completeTask)\n            },\n        });\n      }\n   });\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>;\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <ul>\n          {data.tasks\n                  .slice()\n                  .map(x => {console.log(x) ; return x})\n                  .sort((a,b) => {\n                      return a.entry - b.entry \n                  })\n                  .map(x => {console.log(x) ; return x})\n                  .map(task => {\n            // let input\n\n            return <li key={task.uuid}>\n                <input \n                //  ref={node => {\n                //   input = node;\n                // }}\n                type=\"checkbox\" \n                checked={task.status === \"completed\"}\n                onChange={e => {\n                    e.preventDefault();\n                    task.status !== \"completed\"\n? completeTodo({ variables: { uuid: task.uuid }})\n                        : null\n                }}\n            />{task.description}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}