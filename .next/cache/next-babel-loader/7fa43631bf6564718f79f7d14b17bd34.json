{"ast":null,"code":"var _jsxFileName = \"/storage/code/github/simonwjackson/task-warrior-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        description\n        entry\n        status\n      }\n    }\n`;\nconst COMPLETE_TODO = gql`\n    mutation CompleteTask($uuid: ID!) {\n      completeTask(uuid: $uuid) {\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst Home = () => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(TASKS_QUERY);\n  const [completeTodo] = useMutation(COMPLETE_TODO);\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, \"Error: \", JSON.stringify(error));\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, data.tasks.map(task => {\n    return __jsx(\"li\", {\n      key: task.uuid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 20\n      }\n    }, __jsx(\"input\", {\n      type: \"checkbox\" // checked={task.status === \"completed\"}\n      ,\n      onChange: e => {\n        e.preventDefault();\n        console.logg(task.uuid);\n        completeTodo({\n          variables: {\n            uuid: task.uuid\n          }\n        });\n        console.log('change', completeTodo);\n      } // onChange={e => task.status !== \"completed\"\n      // ? completeTodo({variables:{ uuid: task.uuid }}) : null}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }\n    }), task.description);\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/index.js"],"names":["React","Head","useQuery","useMutation","gql","TASKS_QUERY","COMPLETE_TODO","Home","data","loading","error","completeTodo","JSON","stringify","tasks","map","task","uuid","e","preventDefault","console","logg","variables","log","description"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAoBC,WAApB,QAAsC,qBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,WAAW,GAAGD,GAAI;;;;;;;;CAAxB;AAUA,MAAME,aAAa,GAAGF,GAAI;;;;;;;;;;CAA1B;;AAYA,MAAMG,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BR,QAAQ,CAACG,WAAD,CAAzC;AACA,QAAM,CAAEM,YAAF,IAAmBR,WAAW,CAACG,aAAD,CAApC;;AAGA,MAAIG,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWE,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAX,CAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAM,IAAA,GAAG,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAeC,IAAI,IAAI;AACpB,WAAO;AACH,MAAA,GAAG,EAAEA,IAAI,CAACC,IADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEN;AACG,MAAA,IAAI,EAAC,UADR,CAEG;AAFH;AAGG,MAAA,QAAQ,EAAEC,CAAC,IAAI;AACXA,QAAAA,CAAC,CAACC,cAAF;AACAC,QAAAA,OAAO,CAACC,IAAR,CAAaL,IAAI,CAACC,IAAlB;AACAN,QAAAA,YAAY,CAAC;AAAEW,UAAAA,SAAS,EAAE;AAAEL,YAAAA,IAAI,EAAED,IAAI,CAACC;AAAb;AAAb,SAAD,CAAZ;AACAG,QAAAA,OAAO,CAACG,GAAR,CAAY,QAAZ,EAAsBZ,YAAtB;AACH,OARJ,CASG;AACQ;AAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFM,EAaJK,IAAI,CAACQ,WAbD,CAAP;AAcH,GAfA,CADH,CALF,CADF;AA0BD,CAvCD;;AAyCA,eAAejB,IAAf","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { useQuery , useMutation} from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        description\n        entry\n        status\n      }\n    }\n`;\n\nconst COMPLETE_TODO = gql`\n    mutation CompleteTask($uuid: ID!) {\n      completeTask(uuid: $uuid) {\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst Home = () => {\n  const { data, loading, error } = useQuery(TASKS_QUERY);\n  const [ completeTodo ] = useMutation(COMPLETE_TODO);\n\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>;\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <ul>\n        {data.tasks.map(task => {\n            return <li\n                key={task.uuid}\n            ><input \n                type=\"checkbox\" \n                // checked={task.status === \"completed\"}\n                onChange={e => {\n                    e.preventDefault();\n                    console.logg(task.uuid)\n                    completeTodo({ variables: { uuid: task.uuid }})\n                    console.log('change', completeTodo)\n                }}\n                // onChange={e => task.status !== \"completed\"\n                        // ? completeTodo({variables:{ uuid: task.uuid }}) : null}\n            />{task.description}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}