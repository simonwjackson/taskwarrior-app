{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/storage/code/github/simonwjackson/task-warrior-react/pages/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CompleteTask($uuid: ID!) {\\n      completeTask(uuid: $uuid) {\\n        uuid\\n        description\\n        entry\\n        modified\\n        status\\n        urgency\\n      }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    {\\n      tasks {\\n        uuid\\n        description\\n        entry\\n        modified\\n        status\\n        urgency\\n      }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nvar TASKS_QUERY = gql(_templateObject());\nvar COMPLETE_TODO = gql(_templateObject2());\n\nvar Home = function Home() {\n  var _useQuery = useQuery(TASKS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useMutation = useMutation(COMPLETE_TODO, {\n    update: function update(cache, _ref) {\n      var data = _ref.data;\n\n      var _cache$readQuery = cache.readQuery({\n        query: TASKS_QUERY\n      }),\n          tasks = _cache$readQuery.tasks;\n\n      cache.writeQuery({\n        query: TASKS_QUERY,\n        data: {\n          tasks: tasks.filter(function (task) {\n            return task.uuid !== data.completeTask.uuid;\n          }).concat(data.completeTask)\n        }\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      completeTodo = _useMutation2[0];\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    }, \"Error: \", JSON.stringify(error));\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, data.tasks.slice().sort(function (a, b) {\n    return a.entry < b.entry ? -1 : a.entry > b.entry ? 1 : 0;\n  }).map(function (task) {\n    // let input\n    return __jsx(\"li\", {\n      key: task.uuid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 20\n      }\n    }, __jsx(\"input\", {\n      //  ref={node => {\n      //   input = node;\n      // }}\n      type: \"checkbox\",\n      checked: task.status === \"completed\",\n      onChange: function onChange(e) {\n        e.preventDefault();\n        task.status !== \"completed\" ? completeTodo({\n          variables: {\n            uuid: task.uuid\n          }\n        }) : null;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }), task.description);\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/index.js"],"names":["React","Head","useQuery","useMutation","gql","TASKS_QUERY","COMPLETE_TODO","Home","data","loading","error","update","cache","readQuery","query","tasks","writeQuery","filter","task","uuid","completeTask","concat","completeTodo","JSON","stringify","slice","sort","a","b","entry","map","status","e","preventDefault","variables","description"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAoBC,WAApB,QAAsC,qBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,WAAW,GAAGD,GAAH,mBAAjB;AAaA,IAAME,aAAa,GAAGF,GAAH,oBAAnB;;AAaA,IAAMG,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBACgBL,QAAQ,CAACG,WAAD,CADxB;AAAA,MACTG,IADS,aACTA,IADS;AAAA,MACHC,OADG,aACHA,OADG;AAAA,MACMC,KADN,aACMA,KADN;;AAAA,qBAEUP,WAAW,CAACG,aAAD,EAAgB;AAClDK,IAAAA,MADkD,kBAC3CC,KAD2C,QAC1B;AAAA,UAARJ,IAAQ,QAARA,IAAQ;;AAAA,6BACJI,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAET;AAAT,OAAhB,CADI;AAAA,UACdU,KADc,oBACdA,KADc;;AAGtBH,MAAAA,KAAK,CAACI,UAAN,CAAiB;AACfF,QAAAA,KAAK,EAAET,WADQ;AAEbG,QAAAA,IAAI,EAAE;AAAEO,UAAAA,KAAK,EAAEA,KAAK,CACfE,MADU,CACH,UAAAC,IAAI;AAAA,mBAAIA,IAAI,CAACC,IAAL,KAAcX,IAAI,CAACY,YAAL,CAAkBD,IAApC;AAAA,WADD,EAEVE,MAFU,CAEHb,IAAI,CAACY,YAFF;AAAT;AAFO,OAAjB;AAOD;AAXiD,GAAhB,CAFrB;AAAA;AAAA,MAEPE,YAFO;;AAgBjB,MAAIb,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWa,IAAI,CAACC,SAAL,CAAed,KAAf,CAAX,CAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAM,IAAA,GAAG,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,IAAI,CAACO,KAAL,CACQU,KADR,GAEQC,IAFR,CAEa,UAACC,CAAD,EAAGC,CAAH;AAAA,WAAUD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAb,GAAsB,CAAC,CAAvB,GAA6BF,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAb,GAAsB,CAAtB,GAA0B,CAA/D;AAAA,GAFb,EAGQC,GAHR,CAGY,UAAAZ,IAAI,EAAI;AACnB;AAEA,WAAO;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH;AACA;AACA;AACA;AACA,MAAA,IAAI,EAAC,UAJL;AAKA,MAAA,OAAO,EAAED,IAAI,CAACa,MAAL,KAAgB,WALzB;AAMA,MAAA,QAAQ,EAAE,kBAAAC,CAAC,EAAI;AACXA,QAAAA,CAAC,CAACC,cAAF;AACAf,QAAAA,IAAI,CAACa,MAAL,KAAgB,WAAhB,GACET,YAAY,CAAC;AAAEY,UAAAA,SAAS,EAAE;AAAEf,YAAAA,IAAI,EAAED,IAAI,CAACC;AAAb;AAAb,SAAD,CADd,GAEM,IAFN;AAGH,OAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG,EAaJD,IAAI,CAACiB,WAbD,CAAP;AAcH,GApBE,CADL,CALF,CADF;AA+BD,CAvDD;;AAyDA,eAAe5B,IAAf","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { useQuery , useMutation} from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst COMPLETE_TODO = gql`\n    mutation CompleteTask($uuid: ID!) {\n      completeTask(uuid: $uuid) {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst Home = () => {\n  const { data, loading, error } = useQuery(TASKS_QUERY);\n    const [ completeTodo ] = useMutation(COMPLETE_TODO, {\n      update(cache, { data }) {\n        const { tasks } = cache.readQuery({ query: TASKS_QUERY });\n\n        cache.writeQuery({\n          query: TASKS_QUERY,\n            data: { tasks: tasks\n                .filter(task => task.uuid !== data.completeTask.uuid)\n                .concat(data.completeTask)\n            },\n        });\n      }\n   });\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>;\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <ul>\n          {data.tasks\n                  .slice()\n                  .sort((a,b) => (a.entry < b.entry) ? -1 : ((a.entry > b.entry) ? 1 : 0))\n                  .map(task => {\n            // let input\n\n            return <li key={task.uuid}>\n                <input \n                //  ref={node => {\n                //   input = node;\n                // }}\n                type=\"checkbox\" \n                checked={task.status === \"completed\"}\n                onChange={e => {\n                    e.preventDefault();\n                    task.status !== \"completed\"\n                    ? completeTodo({ variables: { uuid: task.uuid }})\n                        : null\n                }}\n            />{task.description}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}