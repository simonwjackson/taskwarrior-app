{"ast":null,"code":"import { ApolloServer, gql } from \"apollo-server-micro\";\nimport { graphql, GraphQLObjectType, GraphQLSchema } from 'graphql';\nimport { GraphQLDate, GraphQLTime, GraphQLDateTime } from 'graphql-iso-date';\n/**\n * Executes a shell command and return it as a Promise.\n * @param cmd {string}\n * @return {Promise<string>}\n */\n\nfunction execShellCommand(cmd) {\n  const exec = require('child_process').exec;\n\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n}\n\nconst typeDefs = gql`\n  scalar Date\n\n  type Task {\n    uuid: ID!\n    description: String\n    entry: Date\n    modified: Date\n    status: String\n    urgency: Float\n  }\n\n  type Query {\n    tasks: [Task]\n  }\n\n  type Mutation {\n    completeTask(uuid: ID): Task\n  }\n`;\nconst resolvers = {\n  Query: {\n    tasks: async () => {\n      const x = await execShellCommand('/usr/bin/task export');\n      return JSON.parse(x);\n    }\n  },\n  Mutation: {\n    completeTask: (a, s, d, f) => {\n      console.log(a, s, d, f);\n    }\n  }\n};\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nconst handler = apolloServer.createHandler({\n  path: \"/api/graphql\"\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/api/graphql.js"],"names":["ApolloServer","gql","graphql","GraphQLObjectType","GraphQLSchema","GraphQLDate","GraphQLTime","GraphQLDateTime","execShellCommand","cmd","exec","require","Promise","resolve","reject","error","stdout","stderr","console","warn","typeDefs","resolvers","Query","tasks","x","JSON","parse","Mutation","completeTask","a","s","d","f","log","apolloServer","handler","createHandler","path","config","api","bodyParser"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,SACIC,OADJ,EAEIC,iBAFJ,EAGIC,aAHJ,QAIO,SAJP;AAMA,SACEC,WADF,EAEEC,WAFF,EAGEC,eAHF,QAIO,kBAJP;AAMA;;;;;;AAKA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC9B,QAAMC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,IAAtC;;AACA,SAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCJ,IAAAA,IAAI,CAACD,GAAD,EAAM,CAACM,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,KAA2B;AACpC,UAAIF,KAAJ,EAAW;AACVG,QAAAA,OAAO,CAACC,IAAR,CAAaJ,KAAb;AACA;;AACDF,MAAAA,OAAO,CAACG,MAAM,GAAEA,MAAF,GAAWC,MAAlB,CAAP;AACA,KALG,CAAJ;AAMA,GAPM,CAAP;AAQA;;AAED,MAAMG,QAAQ,GAAGnB,GAAI;;;;;;;;;;;;;;;;;;;CAArB;AAsBA,MAAMoB,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,YAAY;AACf,YAAMC,CAAC,GAAG,MAAMhB,gBAAgB,CAAC,sBAAD,CAAhC;AACA,aAAOiB,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAP;AACH;AAJE,GADS;AAOdG,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAE,CAACC,CAAD,EAAGC,CAAH,EAAKC,CAAL,EAAOC,CAAP,KAAa;AACvBd,MAAAA,OAAO,CAACe,GAAR,CAAYJ,CAAZ,EAAcC,CAAd,EAAgBC,CAAhB,EAAkBC,CAAlB;AACH;AAHK;AAPI,CAAlB;AAcA,MAAME,YAAY,GAAG,IAAIlC,YAAJ,CAAiB;AAClCoB,EAAAA,QADkC;AAElCC,EAAAA;AAFkC,CAAjB,CAArB;AAKA,MAAMc,OAAO,GAAGD,YAAY,CAACE,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAhB;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,eAAeL,OAAf","sourcesContent":["import { ApolloServer, gql } from \"apollo-server-micro\";\nimport {\n    graphql,\n    GraphQLObjectType,\n    GraphQLSchema,\n} from 'graphql';\n \nimport {\n  GraphQLDate,\n  GraphQLTime,\n  GraphQLDateTime\n} from 'graphql-iso-date';\n\n/**\n * Executes a shell command and return it as a Promise.\n * @param cmd {string}\n * @return {Promise<string>}\n */\nfunction execShellCommand(cmd) {\n const exec = require('child_process').exec;\n return new Promise((resolve, reject) => {\n  exec(cmd, (error, stdout, stderr) => {\n   if (error) {\n    console.warn(error);\n   }\n   resolve(stdout? stdout : stderr);\n  });\n });\n}\n\nconst typeDefs = gql`\n  scalar Date\n\n  type Task {\n    uuid: ID!\n    description: String\n    entry: Date\n    modified: Date\n    status: String\n    urgency: Float\n  }\n\n  type Query {\n    tasks: [Task]\n  }\n\n  type Mutation {\n    completeTask(uuid: ID): Task\n  }\n`;\n\n\nconst resolvers = {\n  Query: {\n      tasks: async () => {\n          const x = await execShellCommand('/usr/bin/task export')\n          return JSON.parse(x)\n      }\n  },\n    Mutation: {\n        completeTask: (a,s,d,f) => {\n            console.log(a,s,d,f)\n        }\n    } \n};\n\nconst apolloServer = new ApolloServer({\n    typeDefs,\n    resolvers\n})\n\nconst handler = apolloServer.createHandler({ path: \"/api/graphql\" });\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}