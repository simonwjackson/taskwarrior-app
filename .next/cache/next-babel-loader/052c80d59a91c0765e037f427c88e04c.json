{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/storage/code/github/simonwjackson/task-warrior-react/pages/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n   mutation ModifyTask($uuid: ID!, $status: String) {\\n      modifyTask(uuid: $uuid, status: $status) {\\n        uuid\\n        description\\n        entry\\n        modified\\n        status\\n        urgency\\n      }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    {\\n      tasks {\\n        uuid\\n        description\\n        entry\\n        modified\\n        status\\n        urgency\\n      }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nvar TASKS_QUERY = gql(_templateObject());\nvar UPDATE_TODO = gql(_templateObject2());\n\nvar sortDateAsc = function sortDateAsc(a, b) {\n  return a.entry < b.entry ? -1 : a.entry > b.entry ? 1 : 0;\n};\n\nvar Home = function Home() {\n  var _useQuery = useQuery(TASKS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useMutation = useMutation(UPDATE_TODO, {\n    update: function update(cache, _ref) {\n      var data = _ref.data;\n\n      var _cache$readQuery = cache.readQuery({\n        query: TASKS_QUERY\n      }),\n          tasks = _cache$readQuery.tasks;\n\n      cache.writeQuery({\n        query: TASKS_QUERY,\n        data: {\n          tasks: tasks.filter(function (task) {\n            return task.uuid !== data.completeTask.uuid;\n          }).concat(data.completeTask)\n        }\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      modifyTask = _useMutation2[0];\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 12\n      }\n    }, \"Error: \", JSON.stringify(error));\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, data.tasks.slice().sort(sortDateAsc).map(function (task) {\n    // let input\n    return __jsx(\"li\", {\n      key: task.uuid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 20\n      }\n    }, __jsx(\"input\", {\n      //  ref={node => {\n      //   input = node;\n      // }}\n      type: \"checkbox\",\n      checked: task.status === 'completed',\n      onChange: function onChange(e) {\n        e.preventDefault();\n        task.status === 'completed' ? modifyTask({\n          variables: {\n            uuid: task.uuid,\n            status: 'pending'\n          }\n        }) : modifyTask({\n          variables: {\n            uuid: task.uuid,\n            status: 'pending'\n          }\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }), task.description);\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/index.js"],"names":["React","Head","useQuery","useMutation","gql","TASKS_QUERY","UPDATE_TODO","sortDateAsc","a","b","entry","Home","data","loading","error","update","cache","readQuery","query","tasks","writeQuery","filter","task","uuid","completeTask","concat","modifyTask","JSON","stringify","slice","sort","map","status","e","preventDefault","variables","description"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport { useQuery , useMutation} from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`\n\nconst UPDATE_TODO = gql`\n   mutation ModifyTask($uuid: ID!, $status: String) {\n      modifyTask(uuid: $uuid, status: $status) {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`\n\nconst sortDateAsc = (a,b) => (a.entry < b.entry) ? -1 : ((a.entry > b.entry) ? 1 : 0)\n\nconst Home = () => {\n  const { data, loading, error } = useQuery(TASKS_QUERY)\n  const [ modifyTask ] = useMutation(UPDATE_TODO, {\n    update(cache, { data }) {\n      const { tasks } = cache.readQuery({ query: TASKS_QUERY })\n\n      cache.writeQuery({\n        query: TASKS_QUERY,\n        data: { tasks: tasks\n          .filter(task => task.uuid !== data.completeTask.uuid)\n          .concat(data.completeTask)\n        },\n      })\n    }\n  })\n\n  if (loading) {\n    return <p>Loading...</p>\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <ul>\n        {data.tasks\n          .slice()\n          .sort(sortDateAsc)\n          .map(task => {\n            // let input\n\n            return <li key={task.uuid}>\n              <input \n                //  ref={node => {\n                //   input = node;\n                // }}\n                type=\"checkbox\" \n                checked={task.status === 'completed'}\n                onChange={e => {\n                  e.preventDefault()\n                  task.status === 'completed'\n                    ? modifyTask({ variables: { \n                      uuid: task.uuid ,\n                      status: 'pending'\n                    }})\n                    : modifyTask({ variables: { \n                      uuid: task.uuid ,\n                      status: 'pending'\n                    }})\n\n                }}\n              />{task.description}</li>\n          })}\n      </ul>\n    </div>\n  )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}