{"ast":null,"code":"var _jsxFileName = \"/storage/code/github/simonwjackson/task-warrior-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\nconst COMPLETE_TODO = gql`\n    mutation CompleteTask($uuid: ID!) {\n      completeTask(uuid: $uuid) {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst Home = () => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(TASKS_QUERY);\n  const [completeTodo] = useMutation(COMPLETE_TODO, {\n    update(cache, {\n      data: {\n        completeTodo\n      }\n    }) {\n      const {\n        tasks\n      } = cache.readQuery({\n        query: TASKS_QUERY\n      });\n      cache.writeQuery({\n        query: TASKS_QUERY,\n        data: {\n          tasks: tasks.concat([completeTodo])\n        }\n      });\n    }\n\n  });\n\n  const updateCache = (cache, {\n    data\n  }) => {\n    // Fetch the todos from the cache\n    const existingTodos = cache.readQuery({\n      query: TASKS_QUERY\n    }); // Add the new todo to the cache\n\n    const newTodo = data.insert_todos.returning[0];\n    cache.writeQuery({\n      query: GET_MY_TODOS,\n      data: {\n        todos: [newTodo, ...existingTodos.todos]\n      }\n    });\n  };\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 12\n      }\n    }, \"Error: \", JSON.stringify(error));\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, data.tasks.map(task => {\n    let input;\n    return __jsx(\"li\", {\n      key: task.uuid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 20\n      }\n    }, __jsx(\"input\", {\n      ref: node => {\n        input = node;\n      },\n      type: \"checkbox\",\n      checked: task.status === \"completed\",\n      onChange: e => {\n        console.log(task.status);\n        e.preventDefault();\n        task.status !== \"completed\" ? completeTodo({\n          variables: {\n            uuid: task.uuid\n          }\n        }) : null;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }), task.description);\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/index.js"],"names":["React","Head","useQuery","useMutation","gql","TASKS_QUERY","COMPLETE_TODO","Home","data","loading","error","completeTodo","update","cache","tasks","readQuery","query","writeQuery","concat","updateCache","existingTodos","newTodo","insert_todos","returning","GET_MY_TODOS","todos","JSON","stringify","map","task","input","uuid","node","status","e","console","log","preventDefault","variables","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { useQuery , useMutation} from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst COMPLETE_TODO = gql`\n    mutation CompleteTask($uuid: ID!) {\n      completeTask(uuid: $uuid) {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst Home = () => {\n  const { data, loading, error } = useQuery(TASKS_QUERY);\n    const [ completeTodo ] = useMutation(COMPLETE_TODO, {\n      update(cache, { data: { completeTodo } }) {\n        const { tasks } = cache.readQuery({ query: TASKS_QUERY });\n        cache.writeQuery({\n          query: TASKS_QUERY,\n          data: { tasks: tasks.concat([completeTodo]) },\n        });\n      }\n});\n\n  const updateCache = (cache, {data}) => {\n    // Fetch the todos from the cache\n    const existingTodos = cache.readQuery({\n      query: TASKS_QUERY\n    });\n    // Add the new todo to the cache\n    const newTodo = data.insert_todos.returning[0];\n    cache.writeQuery({\n      query: GET_MY_TODOS,\n      data: {todos: [newTodo, ...existingTodos.todos]}\n    });\n  };\n\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>;\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <ul>\n        {data.tasks.map(task => {\n            let input\n\n            return <li key={task.uuid}>\n                <input \n                 ref={node => {\n                  input = node;\n                }}\n                type=\"checkbox\" \n                checked={task.status === \"completed\"}\n                onChange={e => {\n                    console.log(task.status)\n                    e.preventDefault();\n                    task.status !== \"completed\"\n                        ? completeTodo({ variables: { uuid: task.uuid }})\n                        : null\n                }}\n            />{task.description}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}