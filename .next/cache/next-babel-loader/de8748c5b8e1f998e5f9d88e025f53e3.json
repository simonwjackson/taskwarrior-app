{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/storage/code/github/simonwjackson/task-warrior-react/pages/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CompleteTask($uuid: ID!) {\\n      completeTask(uuid: $uuid) {\\n        uuid\\n        description\\n        entry\\n        modified\\n        status\\n        urgency\\n      }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    {\\n      tasks {\\n        uuid\\n        description\\n        entry\\n        modified\\n        status\\n        urgency\\n      }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nvar TASKS_QUERY = gql(_templateObject());\nvar COMPLETE_TODO = gql(_templateObject2());\n\nvar Home = function Home() {\n  var _useQuery = useQuery(TASKS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useMutation = useMutation(COMPLETE_TODO, {\n    update: function update(cache, _ref) {\n      var completeTodo = _ref.data.completeTodo;\n\n      var _cache$readQuery = cache.readQuery({\n        query: TASKS_QUERY\n      }),\n          tasks = _cache$readQuery.tasks;\n\n      console.log(tasks, completeTodo);\n      cache.writeQuery({\n        query: TASKS_QUERY,\n        data: {\n          tasks: tasks.concat([completeTodo])\n        }\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      completeTodo = _useMutation2[0];\n\n  var updateCache = function updateCache(cache, _ref2) {\n    var data = _ref2.data;\n    // Fetch the todos from the cache\n    var existingTodos = cache.readQuery({\n      query: TASKS_QUERY\n    }); // Add the new todo to the cache\n\n    var newTodo = data.insert_todos.returning[0];\n    cache.writeQuery({\n      query: GET_MY_TODOS,\n      data: {\n        todos: [newTodo].concat(_toConsumableArray(existingTodos.todos))\n      }\n    });\n  };\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 12\n      }\n    }, \"Error: \", JSON.stringify(error));\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, data.tasks.map(function (task) {\n    var input;\n    return __jsx(\"li\", {\n      key: task.uuid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 20\n      }\n    }, __jsx(\"input\", {\n      ref: function ref(node) {\n        input = node;\n      },\n      type: \"checkbox\",\n      checked: task.status === \"completed\",\n      onChange: function onChange(e) {\n        console.log(task.status);\n        e.preventDefault();\n        task.status !== \"completed\" ? completeTodo({\n          variables: {\n            uuid: task.uuid\n          }\n        }) : null;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }), task.description);\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/index.js"],"names":["React","Head","useQuery","useMutation","gql","TASKS_QUERY","COMPLETE_TODO","Home","data","loading","error","update","cache","completeTodo","readQuery","query","tasks","console","log","writeQuery","concat","updateCache","existingTodos","newTodo","insert_todos","returning","GET_MY_TODOS","todos","JSON","stringify","map","task","input","uuid","node","status","e","preventDefault","variables","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { useQuery , useMutation} from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst COMPLETE_TODO = gql`\n    mutation CompleteTask($uuid: ID!) {\n      completeTask(uuid: $uuid) {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst Home = () => {\n  const { data, loading, error } = useQuery(TASKS_QUERY);\n    const [ completeTodo ] = useMutation(COMPLETE_TODO, {\n      update(cache, { data: { completeTodo } }) {\n        const { tasks } = cache.readQuery({ query: TASKS_QUERY });\n        console.log(tasks, completeTodo)\n        cache.writeQuery({\n          query: TASKS_QUERY,\n          data: { tasks: tasks.concat([completeTodo]) },\n        });\n      }\n});\n\n  const updateCache = (cache, {data}) => {\n    // Fetch the todos from the cache\n    const existingTodos = cache.readQuery({\n      query: TASKS_QUERY\n    });\n    // Add the new todo to the cache\n    const newTodo = data.insert_todos.returning[0];\n    cache.writeQuery({\n      query: GET_MY_TODOS,\n      data: {todos: [newTodo, ...existingTodos.todos]}\n    });\n  };\n\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>;\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <ul>\n        {data.tasks.map(task => {\n            let input\n\n            return <li key={task.uuid}>\n                <input \n                 ref={node => {\n                  input = node;\n                }}\n                type=\"checkbox\" \n                checked={task.status === \"completed\"}\n                onChange={e => {\n                    console.log(task.status)\n                    e.preventDefault();\n                    task.status !== \"completed\"\n                        ? completeTodo({ variables: { uuid: task.uuid }})\n                        : null\n                }}\n            />{task.description}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}