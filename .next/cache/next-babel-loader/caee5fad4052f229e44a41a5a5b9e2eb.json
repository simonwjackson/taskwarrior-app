{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/storage/code/github/simonwjackson/task-warrior-react/pages/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CompleteTask($uuid: ID!) {\\n      completeTask(uuid: $uuid) {\\n        description\\n        entry\\n        modified\\n        status\\n        urgency\\n      }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    {\\n      tasks {\\n        description\\n        entry\\n        status\\n      }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nvar TASKS_QUERY = gql(_templateObject());\nvar COMPLETE_TODO = gql(_templateObject2());\n\nvar Home = function Home() {\n  var _useQuery = useQuery(TASKS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useMutation = useMutation(COMPLETE_TODO),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      completeTodo = _useMutation2[0];\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, \"Error: \", JSON.stringify(error));\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, data.tasks.map(function (task) {\n    return __jsx(\"li\", {\n      key: \"job__\".concat(task.uuid),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 20\n      }\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      checked: task.status === \"completed\",\n      onChange: function onChange(e) {\n        return task.status !== \"completed\" ? completeTodo({\n          uuid: task.uuid\n        }) : null;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }\n    }), task.description);\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/index.js"],"names":["React","Head","useQuery","useMutation","gql","TASKS_QUERY","COMPLETE_TODO","Home","data","loading","error","completeTodo","JSON","stringify","tasks","map","task","uuid","status","e","description"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAoBC,WAApB,QAAsC,qBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,WAAW,GAAGD,GAAH,mBAAjB;AAUA,IAAME,aAAa,GAAGF,GAAH,oBAAnB;;AAYA,IAAMG,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBACgBL,QAAQ,CAACG,WAAD,CADxB;AAAA,MACTG,IADS,aACTA,IADS;AAAA,MACHC,OADG,aACHA,OADG;AAAA,MACMC,KADN,aACMA,KADN;;AAAA,qBAEQP,WAAW,CAACG,aAAD,CAFnB;AAAA;AAAA,MAETK,YAFS;;AAKjB,MAAIF,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWE,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAX,CAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAM,IAAA,GAAG,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI,EAAI;AACpB,WAAO;AACH,MAAA,GAAG,iBAAUA,IAAI,CAACC,IAAf,CADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEN;AACG,MAAA,IAAI,EAAC,UADR;AAEG,MAAA,OAAO,EAAED,IAAI,CAACE,MAAL,KAAgB,WAF5B;AAGG,MAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,eAAIH,IAAI,CAACE,MAAL,KAAgB,WAAhB,GACLP,YAAY,CAAC;AAAEM,UAAAA,IAAI,EAAED,IAAI,CAACC;AAAb,SAAD,CADP,GAC+B,IADnC;AAAA,OAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFM,EAOJD,IAAI,CAACI,WAPD,CAAP;AAQH,GATA,CADH,CALF,CADF;AAoBD,CAjCD;;AAmCA,eAAeb,IAAf","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { useQuery , useMutation} from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        description\n        entry\n        status\n      }\n    }\n`;\n\nconst COMPLETE_TODO = gql`\n    mutation CompleteTask($uuid: ID!) {\n      completeTask(uuid: $uuid) {\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst Home = () => {\n  const { data, loading, error } = useQuery(TASKS_QUERY);\n  const [ completeTodo ] = useMutation(COMPLETE_TODO);\n\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>;\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <ul>\n        {data.tasks.map(task => {\n            return <li\n                key={`job__${task.uuid}`}\n            ><input \n                type=\"checkbox\" \n                checked={task.status === \"completed\"}\n                onChange={e => task.status !== \"completed\" \n                        ? completeTodo({ uuid: task.uuid }) : null}\n            />{task.description}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}