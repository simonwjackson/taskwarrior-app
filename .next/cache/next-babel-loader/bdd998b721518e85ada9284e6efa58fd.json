{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/storage/code/github/simonwjackson/task-warrior-react/pages/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    {\\n      tasks {\\n        description\\n        entry\\n      }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nvar JOBS_QUERY = gql(_templateObject());\n\nvar Home = function Home() {\n  // Create a query hook\n  var _useQuery = useQuery(JOBS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 12\n      }\n    }, \"Error: \", JSON.stringify(error));\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  })), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, data.jobs.map(function (job) {\n    return __jsx(\"li\", {\n      key: \"job__\".concat(job.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 18\n      }\n    }, job.title);\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/index.js"],"names":["React","Head","useQuery","gql","JOBS_QUERY","Home","data","loading","error","JSON","stringify","jobs","map","job","id","title"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,UAAU,GAAGD,GAAH,mBAAhB;;AASA,IAAME,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB;AADiB,kBAEgBH,QAAQ,CAACE,UAAD,CAFxB;AAAA,MAETE,IAFS,aAETA,IAFS;AAAA,MAEHC,OAFG,aAEHA,OAFG;AAAA,MAEMC,KAFN,aAEMA,KAFN;;AAIjB,MAAID,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAWC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAX,CAAP;AACD;;AACD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAM,IAAA,GAAG,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACK,IAAL,CAAUC,GAAV,CAAc,UAAAC,GAAG,EAAI;AACpB,WAAO;AAAI,MAAA,GAAG,iBAAUA,GAAG,CAACC,EAAd,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BD,GAAG,CAACE,KAAhC,CAAP;AACD,GAFA,CADH,CALF,CADF;AAaD,CAxBD;;AA0BA,eAAeV,IAAf","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nconst JOBS_QUERY = gql`\n    {\n      tasks {\n        description\n        entry\n      }\n    }\n`;\n\nconst Home = () => {\n  // Create a query hook\n  const { data, loading, error } = useQuery(JOBS_QUERY);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>;\n  }\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <ul>\n        {data.jobs.map(job => {\n          return <li key={`job__${job.id}`}>{job.title}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}