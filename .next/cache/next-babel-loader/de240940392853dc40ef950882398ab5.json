{"ast":null,"code":"import { ApolloServer, gql } from 'apollo-server-micro';\nimport { graphql, GraphQLObjectType, GraphQLSchema } from 'graphql';\nimport { GraphQLDate, GraphQLTime, GraphQLDateTime } from 'graphql-iso-date';\n/**\n * Executes a shell command and return it as a Promise.\n * @param cmd {string}\n * @return {Promise<string>}\n */\n\nfunction execShellCommand(cmd) {\n  const exec = require('child_process').exec;\n\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        console.warn(error);\n      }\n\n      resolve(stdout ? stdout : stderr);\n    });\n  });\n}\n\nconst typeDefs = gql`\n  scalar Date\n\n  type Task {\n    uuid: ID!\n    description: String\n    entry: Date\n    modified: Date\n    status: String\n    urgency: Float\n  }\n\n  type Query {\n    tasks: [Task]\n    filterTask(filter: String): [Task]\n  }\n\n  type Mutation {\n    modifyTask(uuid: ID, status: String): Task\n    addTask(description: String): String\n  }\n`;\nconst resolvers = {\n  Query: {\n    tasks: async (a, s, d, f) => {\n      const x = await execShellCommand('/usr/bin/task export');\n      return JSON.parse(x);\n    },\n    filterTask: async (a, s, d, f) => {\n      // TODO: Split filter by space and wrap in quotes\n      const jsonString = await execShellCommand(`/usr/bin/task $(grep \"next.filter\" /home/node/.taskrc | /usr/bin/cut -d \\'=\\' -f 2) \"${s.filter}\" export`);\n      return JSON.parse(jsonString);\n    }\n  },\n  Mutation: {\n    addTask: async (a, s, d, f) => {\n      await execShellCommand(`/usr/bin/task add ${s.description}`);\n      return 'ok';\n    },\n    modifyTask: async (a, s, d, f) => {\n      await execShellCommand(`/usr/bin/task ${s.uuid} modify status:${s.status}`);\n      const x = await execShellCommand(`/usr/bin/task rc.json.array=off ${s.uuid} export`);\n      return JSON.parse(x);\n    }\n  }\n};\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nconst handler = apolloServer.createHandler({\n  path: '/api/graphql'\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":{"version":3,"sources":["/home/node/app/pages/api/graphql.js"],"names":["ApolloServer","gql","graphql","GraphQLObjectType","GraphQLSchema","GraphQLDate","GraphQLTime","GraphQLDateTime","execShellCommand","cmd","exec","require","Promise","resolve","reject","error","stdout","stderr","console","warn","typeDefs","resolvers","Query","tasks","a","s","d","f","x","JSON","parse","filterTask","jsonString","filter","Mutation","addTask","description","modifyTask","uuid","status","apolloServer","handler","createHandler","path","config","api","bodyParser"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,SACEC,OADF,EAEEC,iBAFF,EAGEC,aAHF,QAIO,SAJP;AAMA,SACEC,WADF,EAEEC,WAFF,EAGEC,eAHF,QAIO,kBAJP;AAMA;;;;;;AAKA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B,QAAMC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,IAAtC;;AACA,SAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,IAAAA,IAAI,CAACD,GAAD,EAAM,CAACM,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,KAA2B;AACnC,UAAIF,KAAJ,EAAW;AACTG,QAAAA,OAAO,CAACC,IAAR,CAAaJ,KAAb;AACD;;AACDF,MAAAA,OAAO,CAACG,MAAM,GAAEA,MAAF,GAAWC,MAAlB,CAAP;AACD,KALG,CAAJ;AAMD,GAPM,CAAP;AAQD;;AAED,MAAMG,QAAQ,GAAGnB,GAAI;;;;;;;;;;;;;;;;;;;;;CAArB;AAuBA,MAAMoB,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,OAAOC,CAAP,EAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,KAAmB;AACxB,YAAMC,CAAC,GAAG,MAAMpB,gBAAgB,CAAC,sBAAD,CAAhC;AACA,aAAOqB,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAP;AACD,KAJI;AAMLG,IAAAA,UAAU,EAAE,OAAOP,CAAP,EAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,KAAmB;AAC7B;AACA,YAAMK,UAAU,GAAG,MAAMxB,gBAAgB,CAAE,wFAAuFiB,CAAC,CAACQ,MAAO,UAAlG,CAAzC;AACA,aAAOJ,IAAI,CAACC,KAAL,CAAWE,UAAX,CAAP;AACD;AAVI,GADS;AAchBE,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,OAAOX,CAAP,EAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,KAAmB;AAC1B,YAAMnB,gBAAgB,CAAE,qBAAoBiB,CAAC,CAACW,WAAY,EAApC,CAAtB;AACA,aAAO,IAAP;AACD,KAJO;AAMRC,IAAAA,UAAU,EAAE,OAAOb,CAAP,EAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,KAAmB;AAC7B,YAAMnB,gBAAgB,CAAE,iBAAgBiB,CAAC,CAACa,IAAK,kBAAiBb,CAAC,CAACc,MAAO,EAAnD,CAAtB;AACA,YAAMX,CAAC,GAAG,MAAMpB,gBAAgB,CAAE,mCAAkCiB,CAAC,CAACa,IAAK,SAA3C,CAAhC;AACA,aAAOT,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAP;AACD;AAVO;AAdM,CAAlB;AA4BA,MAAMY,YAAY,GAAG,IAAIxC,YAAJ,CAAiB;AACpCoB,EAAAA,QADoC;AAEpCC,EAAAA;AAFoC,CAAjB,CAArB;AAKA,MAAMoB,OAAO,GAAGD,YAAY,CAACE,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAhB;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,eAAeL,OAAf","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro'\nimport {\n  graphql,\n  GraphQLObjectType,\n  GraphQLSchema,\n} from 'graphql' \n\nimport {\n  GraphQLDate,\n  GraphQLTime,\n  GraphQLDateTime\n} from 'graphql-iso-date'\n\n/**\n * Executes a shell command and return it as a Promise.\n * @param cmd {string}\n * @return {Promise<string>}\n */\nfunction execShellCommand(cmd) {\n  const exec = require('child_process').exec\n  return new Promise((resolve, reject) => {\n    exec(cmd, (error, stdout, stderr) => {\n      if (error) {\n        console.warn(error)\n      }\n      resolve(stdout? stdout : stderr)\n    })\n  })\n}\n\nconst typeDefs = gql`\n  scalar Date\n\n  type Task {\n    uuid: ID!\n    description: String\n    entry: Date\n    modified: Date\n    status: String\n    urgency: Float\n  }\n\n  type Query {\n    tasks: [Task]\n    filterTask(filter: String): [Task]\n  }\n\n  type Mutation {\n    modifyTask(uuid: ID, status: String): Task\n    addTask(description: String): String\n  }\n` \n\nconst resolvers = {\n  Query: {\n    tasks: async (a,s,d,f) => {\n      const x = await execShellCommand('/usr/bin/task export')\n      return JSON.parse(x)\n    },\n\n    filterTask: async (a,s,d,f) => { \n      // TODO: Split filter by space and wrap in quotes\n      const jsonString = await execShellCommand(`/usr/bin/task $(grep \"next.filter\" /home/node/.taskrc | /usr/bin/cut -d \\'=\\' -f 2) \"${s.filter}\" export`)\n      return JSON.parse(jsonString)\n    },\n  },\n\n  Mutation: {\n    addTask: async (a,s,d,f) => {\n      await execShellCommand(`/usr/bin/task add ${s.description}`)\n      return 'ok'\n    },\n\n    modifyTask: async (a,s,d,f) => {\n      await execShellCommand(`/usr/bin/task ${s.uuid} modify status:${s.status}`)\n      const x = await execShellCommand(`/usr/bin/task rc.json.array=off ${s.uuid} export`)\n      return JSON.parse(x)\n    }\n  } \n}\n\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers\n})\n\nconst handler = apolloServer.createHandler({ path: '/api/graphql' })\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n}\n\nexport default handler\n"]},"metadata":{},"sourceType":"module"}