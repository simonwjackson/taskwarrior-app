{"ast":null,"code":"var _jsxFileName = \"/storage/code/github/simonwjackson/task-warrior-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\nconst UPDATE_TODO = gql`\n   mutation ModifyTask($uuid: ID!, $status: String) {\n      modifyTask(uuid: $uuid, status: $status) {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`;\n\nconst sortDateAsc = (a, b) => a.entry < b.entry ? -1 : a.entry > b.entry ? 1 : 0;\n\nconst Home = () => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(TASKS_QUERY);\n  const [modifyTask] = useMutation(UPDATE_TODO, {\n    update(cache, {\n      data\n    }) {\n      const {\n        tasks\n      } = cache.readQuery({\n        query: TASKS_QUERY\n      });\n      cache.writeQuery({\n        query: TASKS_QUERY,\n        data: {\n          tasks: tasks.filter(task => task.uuid !== data.completeTask.uuid).concat(data.completeTask)\n        }\n      });\n    }\n\n  });\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 12\n      }\n    }, \"Error: \", JSON.stringify(error));\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, data.tasks.slice().sort(sortDateAsc).map(task => {\n    // let input\n    return __jsx(\"li\", {\n      key: task.uuid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 20\n      }\n    }, __jsx(\"input\", {\n      //  ref={node => {\n      //   input = node;\n      // }}\n      type: \"checkbox\",\n      checked: task.status === 'completed',\n      onChange: e => {\n        e.preventDefault();\n        task.status !== 'completed' ? modifyTask({\n          variables: {\n            uuid: task.uuid\n          }\n        }) : null;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }), task.description);\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/index.js"],"names":["React","Head","useQuery","useMutation","gql","TASKS_QUERY","UPDATE_TODO","sortDateAsc","a","b","entry","Home","data","loading","error","modifyTask","update","cache","tasks","readQuery","query","writeQuery","filter","task","uuid","completeTask","concat","JSON","stringify","slice","sort","map","status","e","preventDefault","variables","description"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport { useQuery , useMutation} from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nconst TASKS_QUERY = gql`\n    {\n      tasks {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`\n\nconst UPDATE_TODO = gql`\n   mutation ModifyTask($uuid: ID!, $status: String) {\n      modifyTask(uuid: $uuid, status: $status) {\n        uuid\n        description\n        entry\n        modified\n        status\n        urgency\n      }\n    }\n`\n\nconst sortDateAsc = (a,b) => (a.entry < b.entry) ? -1 : ((a.entry > b.entry) ? 1 : 0)\n\nconst Home = () => {\n  const { data, loading, error } = useQuery(TASKS_QUERY)\n  const [ modifyTask ] = useMutation(UPDATE_TODO, {\n    update(cache, { data }) {\n      const { tasks } = cache.readQuery({ query: TASKS_QUERY })\n\n      cache.writeQuery({\n        query: TASKS_QUERY,\n        data: { tasks: tasks\n          .filter(task => task.uuid !== data.completeTask.uuid)\n          .concat(data.completeTask)\n        },\n      })\n    }\n  })\n\n  if (loading) {\n    return <p>Loading...</p>\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>Home</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <ul>\n        {data.tasks\n          .slice()\n          .sort(sortDateAsc)\n          .map(task => {\n            // let input\n\n            return <li key={task.uuid}>\n              <input \n                //  ref={node => {\n                //   input = node;\n                // }}\n                type=\"checkbox\" \n                checked={task.status === 'completed'}\n                onChange={e => {\n                  e.preventDefault()\n                  task.status !== 'completed'\n                    ? modifyTask({ variables: { uuid: task.uuid }})\n                    : null\n                }}\n              />{task.description}</li>\n          })}\n      </ul>\n    </div>\n  )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}