{"ast":null,"code":"import { ApolloServer, gql } from \"apollo-server-micro\";\n/**\n * Executes a shell command and return it as a Promise.\n * @param cmd {string}\n * @return {Promise<string>}\n */\n// function execShellCommand(cmd) {\n//  const exec = require('child_process').exec;\n//  return new Promise((resolve, reject) => {\n//   exec(cmd, (error, stdout, stderr) => {\n//    if (error) {\n//     console.warn(error);\n//    }\n//    resolve(stdout? stdout : stderr);\n//   });\n//  });\n// }\n\nconst typeDefs = gql`\n  scalar Date\n\n  type Task {\n    uuid: ID!\n    description: String\n    entry: String\n    modified: String\n    status: String\n    urgency: Float\n  }\n\n  type Query {\n    tasks: [Task]\n  }\n`;\nconst resolvers = {\n  Query: {\n    tasks: async () => {\n      return []; // const x = await execShellCommand('/usr/bin/task export')\n      // console.log(x)\n      // return JSON.parse(x)\n    }\n  }\n};\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nconst handler = apolloServer.createHandler({\n  path: \"/api/task\"\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":{"version":3,"sources":["/storage/code/github/simonwjackson/task-warrior-react/pages/api/graphql.js"],"names":["ApolloServer","gql","typeDefs","resolvers","Query","tasks","apolloServer","handler","createHandler","path","config","api","bodyParser"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAGD,GAAI;;;;;;;;;;;;;;;CAArB;AAkBA,MAAME,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,YAAY;AACf,aAAO,EAAP,CADe,CAEf;AACA;AACA;AACH;AANE;AADS,CAAlB;AAWA,MAAMC,YAAY,GAAG,IAAIN,YAAJ,CAAiB;AAClCE,EAAAA,QADkC;AAElCC,EAAAA;AAFkC,CAAjB,CAArB;AAKA,MAAMI,OAAO,GAAGD,YAAY,CAACE,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAhB;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,eAAeL,OAAf","sourcesContent":["import { ApolloServer, gql } from \"apollo-server-micro\";\n\n/**\n * Executes a shell command and return it as a Promise.\n * @param cmd {string}\n * @return {Promise<string>}\n */\n// function execShellCommand(cmd) {\n//  const exec = require('child_process').exec;\n//  return new Promise((resolve, reject) => {\n//   exec(cmd, (error, stdout, stderr) => {\n//    if (error) {\n//     console.warn(error);\n//    }\n//    resolve(stdout? stdout : stderr);\n//   });\n//  });\n// }\n\nconst typeDefs = gql`\n  scalar Date\n\n  type Task {\n    uuid: ID!\n    description: String\n    entry: String\n    modified: String\n    status: String\n    urgency: Float\n  }\n\n  type Query {\n    tasks: [Task]\n  }\n`;\n\n\nconst resolvers = {\n  Query: {\n      tasks: async () => {\n          return []\n          // const x = await execShellCommand('/usr/bin/task export')\n          // console.log(x)\n          // return JSON.parse(x)\n      }\n  },\n};\n\nconst apolloServer = new ApolloServer({\n    typeDefs,\n    resolvers\n})\n\nconst handler = apolloServer.createHandler({ path: \"/api/task\" });\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}